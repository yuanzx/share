(function(){var d,f,i=function(a){return"[object Array]"===Object.prototype.toString.call(a)},n=function(a,b,c){if(i(a)){for(var c=Array(a.length),e=0,g=a.length;e<g;e++)c[e]=b(a[e]);return c}e=c?b:null;c=c||b;b={};for(g in a)if(a.hasOwnProperty(g)){var d=a[g],f=e?e(g):g,d=c?c(d):d;b[f]=d}return b},j=function(a){for(var b=0,a=a.split("."),c=0;3>c;c++)b*=100,c<a.length&&(b+=parseInt(a[c],10));return b},o=function(a,b){if(!i(b)){for(var c=Array(arguments.length-1),e=1;e<arguments.length;e++)c[e-1]=
arguments[e];return o(a,c)}return a.replace(/\{{1,2}\d+\}{1,2}/g,function(a){if(0==a.indexOf("{{")&&a.indexOf("}}")==a.length-2)return a.substring(1,a.length-1);for(var c=0;"{"==a[c];)c++;for(var e=a.length-1;"}"==a[e];)e--;c=parseInt(a.substring(c,e+1),10);return a.replace("{"+c+"}",b[c])})};f={isArray:i,each:function(a,b){if(i(a))for(var c=0,e=a.length;c<e;c++){var d=1===b.length?b(a[c]):b(c,a[c]);if(void 0!==d)return d}else for(c in a)if(a.hasOwnProperty(c)&&(d=1===b.length?b(a[c]):b(c,a[c]),void 0!==
d))return d},isEmpty:function(a){return i(a)?0===a.length:!f.each(a,function(){return!0})},map:n,clone:function(a){return n(a)},v2n:j,testVersion:function(a,b){var c=a.substring(1),e=c.split(".");e[e.length-1]="0";e[e.length-2]=(parseInt(e[e.length-2],10)+1).toString();var e=e.join("."),d=j(b);return j(c)<=d&&d<j(e)},format:o,once:function(a){var b=!1;return function(){b||(a.apply(this,arguments),b=!0)}}};var h={ALL:0,TRACE:1,DEBUG:2,INFO:3,WARN:4,ERROR:5,OFF:100},l=function(){this.level=h.DEBUG};
l.prototype={log:function(a,b){if(this.level<=a)try{console.log(b)}catch(c){}},trace:function(a){this.log(h.TRACE,a)},debug:function(a){this.log(h.DEBUG,a)},info:function(a){this.log(h.INFO,a)},warn:function(a){this.log(h.WARN,a)},error:function(a){this.log(h.ERROR,a)}};var k=function(a){var b=d.modules[a.name];b&&b.version!=a.version&&d.logger.warn(f.format('The module "{0}" with version "{1}" has already been initialized, skip version "{2}".',a.name,b.version,a.version));f.each(a.dependencies||
[],function(a,b){var g=d.modules[a];if(!g)throw Error(f.format('Missing required module: "{0}" (expected version: "{1}").',a,b));if(!f.testVersion(b,g.version))throw Error(f.format('Version of module "{0}" mismatched, expected: "{1}", actual: "{2}".',a,b,g.version));});a.init();b={};b.name=a.name;b.version=a.version;a.autoloads&&(b.autoloads=a.autoloads);a.dependencies&&(b.dependencies=a.dependencies);d.modules[a.name]=b},p=!!("function"===typeof require&&"undefined"!==typeof module&&module.exports),
q=!!("function"===typeof require&&"function"===typeof define&&define.amd),s=function(a){var b=a.autoloads||[];if(p){var c=a.require;f.each(b,function(a){try{c("./wind-"+a)}catch(b){c("wind-"+a)}});k(a)}else q?(b=f.map(b,function(a){return"wind-"+a}),define("wind-"+a.name,b,function(){if(a.onerror)try{k(a)}catch(b){a.onerror(b)}else k(a)})):k(a)},m=function(){d.logger=new l;d.Logging={Logger:l,Level:h};d._=f;d.modules={core:{name:"core",version:"0.7.0"}};d.binders={};d.builders={};d.define=s};if(p)d=
module.exports,m();else if(q)define("wind-core",function(){d={};m();return d});else{var r=Function("return this")();if(r.Wind)throw Error("There's already a Wind root here, please load the component only once.");d=r.Wind={};m()}})();
